"use client";

import React, { useState } from 'react';

interface AnalysisResult {
    preliminaryAssessment: string;
    possibleCauses: string;
    urgencyLevel: string;
    recommendations: string;
    doctorRecommendation: string;
}

export default function Home() {
    const [patientAge, setPatientAge] = useState('');
    const [patientGender, setPatientGender] = useState('');
    const [mainComplaint, setMainComplaint] = useState('');
    const [additionalSymptoms, setAdditionalSymptoms] = useState<string[]>([]);
    const [duration, setDuration] = useState('');
    const [loading, setLoading] = useState(false);
    const [results, setResults] = useState<AnalysisResult | null>(null);

    const medicalKnowledgeBase = {
        symptoms: {
            'fever': { name: '–ü–æ–≤—ã—à–µ–Ω–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞', severity: 2 },
            'fatigue': { name: '–°–ª–∞–±–æ—Å—Ç—å/—É—Å—Ç–∞–ª–æ—Å—Ç—å', severity: 1 },
            'nausea': { name: '–¢–æ—à–Ω–æ—Ç–∞', severity: 2 },
            'dizziness': { name: '–ì–æ–ª–æ–≤–æ–∫—Ä—É–∂–µ–Ω–∏–µ', severity: 2 },
            'cough': { name: '–ö–∞—à–µ–ª—å', severity: 1 },
            'soreThroat': { name: '–ë–æ–ª—å –≤ –≥–æ—Ä–ª–µ', severity: 1 },
            'bodyAches': { name: '–ë–æ–ª–∏ –≤ —Ç–µ–ª–µ', severity: 2 },
            'chills': { name: '–û–∑–Ω–æ–±', severity: 2 }
        },
        conditions: [
            {
                name: '–û—Å—Ç—Ä–∞—è —Ä–µ—Å–ø–∏—Ä–∞—Ç–æ—Ä–Ω–∞—è –≤–∏—Ä—É—Å–Ω–∞—è –∏–Ω—Ñ–µ–∫—Ü–∏—è (–û–†–í–ò)',
                symptoms: ['fever', 'fatigue', 'cough', 'soreThroat', 'bodyAches'],
                urgency: 'low',
                doctor: '—Ç–µ—Ä–∞–ø–µ–≤—Ç'
            },
            {
                name: '–ì—Ä–∏–ø–ø',
                symptoms: ['fever', 'fatigue', 'bodyAches', 'chills', 'cough'],
                urgency: 'medium',
                doctor: '—Ç–µ—Ä–∞–ø–µ–≤—Ç'
            },
            {
                name: '–ú–∏–≥—Ä–µ–Ω—å',
                symptoms: ['nausea', 'dizziness', 'fatigue'],
                urgency: 'low',
                doctor: '–Ω–µ–≤—Ä–æ–ª–æ–≥'
            },
            {
                name: '–ü–∏—â–µ–≤–æ–µ –æ—Ç—Ä–∞–≤–ª–µ–Ω–∏–µ',
                symptoms: ['nausea', 'dizziness', 'fatigue'],
                urgency: 'medium',
                doctor: '–≥–∞—Å—Ç—Ä–æ—ç–Ω—Ç–µ—Ä–æ–ª–æ–≥'
            }
        ]
    };

    const handleSymptomChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        const { value, checked } = e.target;
        setAdditionalSymptoms(prev =>
            checked ? [...prev, value] : prev.filter(s => s !== value)
        );
    };

    const handleFormSubmit = async (e: React.FormEvent) => {
        e.preventDefault();

        if (!patientAge || !patientGender || !mainComplaint || !duration) {
            alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è');
            return;
        }

        setLoading(true);
        setResults(null); // –°–±—Ä–æ—Å–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã

        try {
            // –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π –≤—ã–∑–æ–≤ API
            const response = await fetch('/api/analyze', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    age: patientAge,
                    gender: patientGender,
                    mainComplaint,
                    additionalSymptoms,
                    duration,
                }),
            });

            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            const data = await response.json();
            displayResults(data);

        } catch (error) {
            console.error('Error analyzing symptoms:', error);
            alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Å–∏–º–ø—Ç–æ–º–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
        } finally {
            setLoading(false);
        }
    };

    const displayResults = (analysis: {
        preliminaryAssessment: string;
        possibleCauses: string;
        urgencyLevel: string;
        recommendations: string;
        doctorRecommendation: string;
    } | null) => {
        setResults(analysis);
        // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º
        setTimeout(() => {
            document.getElementById('results')?.scrollIntoView({ behavior: 'smooth' });
        }, 100);
    };

    const formatText = (text: string) => {
        return text
            .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
            .replace(/\n/g, '<br>')
            .replace(/‚Ä¢/g, '<br>‚Ä¢');
    };

    return (
        <div className="container">
            <div className="header">
                <h1 className="logo">üè• MedAnalyzer</h1>
                <p className="tagline">–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–∏–º–ø—Ç–æ–º–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ò–ò</p>
            </div>

            <div className="main-card">
                <div className="api-info">
                    <strong>–î–µ–º–æ-—Ä–µ–∂–∏–º:</strong> –í —Ä–µ–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ API (Infermedica, ApiMedic) –∏ Gemini API –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. –ó–¥–µ—Å—å –ø–æ–∫–∞–∑–∞–Ω–∞ –∏–º–∏—Ç–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã.
                </div>

                <form onSubmit={handleFormSubmit}>
                    <div className="form-group">
                        <label htmlFor="patientAge">–í–æ–∑—Ä–∞—Å—Ç –ø–∞—Ü–∏–µ–Ω—Ç–∞:</label>
                        <input
                            type="text"
                            id="patientAge"
                            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 25 –ª–µ—Ç"
                            required
                            value={patientAge}
                            onChange={(e) => setPatientAge(e.target.value)}
                        />
                    </div>

                    <div className="form-group">
                        <label htmlFor="patientGender">–ü–æ–ª:</label>
                        <select
                            id="patientGender"
                            required
                            value={patientGender}
                            onChange={(e) => setPatientGender(e.target.value)}
                        >
                            <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª</option>
                            <option value="male">–ú—É–∂—Å–∫–æ–π</option>
                            <option value="female">–ñ–µ–Ω—Å–∫–∏–π</option>
                        </select>
                    </div>

                    <div className="form-group">
                        <label htmlFor="mainComplaint">–û—Å–Ω–æ–≤–Ω–∞—è –∂–∞–ª–æ–±–∞ (–ø–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—à–∏—Ç–µ —Å–∏–º–ø—Ç–æ–º—ã):</label>
                        <textarea
                            id="mainComplaint"
                            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ì–æ–ª–æ–≤–Ω–∞—è –±–æ–ª—å –≤ —Ç–µ—á–µ–Ω–∏–µ 3 –¥–Ω–µ–π, —É—Å–∏–ª–∏–≤–∞–µ—Ç—Å—è –∫ –≤–µ—á–µ—Ä—É, —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞–µ—Ç—Å—è —Ç–æ—à–Ω–æ—Ç–æ–π..."
                            required
                            value={mainComplaint}
                            onChange={(e) => setMainComplaint(e.target.value)}
                        ></textarea>
                    </div>

                    <div className="form-group">
                        <label>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–∏–º–ø—Ç–æ–º—ã (–æ—Ç–º–µ—Ç—å—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ):</label>
                        <div className="symptoms-grid" id="symptomsGrid">
                            {Object.entries(medicalKnowledgeBase.symptoms).map(([key, symptom]) => (
                                <div
                                    key={key}
                                    className={`symptom-checkbox ${additionalSymptoms.includes(key) ? 'selected' : ''}`}
                                    onClick={() => {
                                        const input = document.getElementById(key) as HTMLInputElement;
                                        if (input) {
                                            input.checked = !input.checked;
                                            handleSymptomChange({ target: input } as React.ChangeEvent<HTMLInputElement>);
                                        }
                                    }}
                                >
                                    <input
                                        type="checkbox"
                                        id={key}
                                        value={key}
                                        checked={additionalSymptoms.includes(key)}
                                        onChange={handleSymptomChange}
                                    />
                                    <label htmlFor={key}>{symptom.name}</label>
                                </div>
                            ))}
                        </div>
                    </div>

                    <div className="form-group">
                        <label htmlFor="duration">–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–∏–º–ø—Ç–æ–º–æ–≤:</label>
                        <select
                            id="duration"
                            required
                            value={duration}
                            onChange={(e) => setDuration(e.target.value)}
                        >
                            <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥</option>
                            <option value="less_than_day">–ú–µ–Ω–µ–µ —Å—É—Ç–æ–∫</option>
                            <option value="1-3_days">1-3 –¥–Ω—è</option>
                            <option value="4-7_days">4-7 –¥–Ω–µ–π</option>
                            <option value="1-2_weeks">1-2 –Ω–µ–¥–µ–ª–∏</option>
                            <option value="more_than_month">–ë–æ–ª–µ–µ –º–µ—Å—è—Ü–∞</option>
                        </select>
                    </div>

                    <button type="submit" className="analyze-btn" id="analyzeBtn" disabled={loading}>
                        –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–∏–º–ø—Ç–æ–º—ã
                    </button>
                </form>

                {loading && (
                    <div className="loading show" id="loading">
                        <div className="spinner"></div>
                        <span>–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏–º–ø—Ç–æ–º—ã —Å –ø–æ–º–æ—â—å—é –ò–ò...</span>
                    </div>
                )}

                {results && (
                    <div className="results show" id="results">
                        <h3>
                            <svg className="results-icon" viewBox="0 0 24 24">
                                <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"/>
                            </svg>
                            –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
                        </h3>
                        
                        <div className="analysis-section">
                            <h4>üîç –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞</h4>
                            <div dangerouslySetInnerHTML={{ __html: formatText(results.preliminaryAssessment) }}></div>
                        </div>

                        <div className="analysis-section">
                            <h4>üè• –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã</h4>
                            <div dangerouslySetInnerHTML={{ __html: formatText(results.possibleCauses) }}></div>
                        </div>

                        <div className="analysis-section">
                            <h4>‚ö†Ô∏è –£—Ä–æ–≤–µ–Ω—å —Å—Ä–æ—á–Ω–æ—Å—Ç–∏</h4>
                            <div dangerouslySetInnerHTML={{ __html: formatText(results.urgencyLevel) }}></div>
                        </div>

                        <div className="analysis-section">
                            <h4>üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</h4>
                            <div dangerouslySetInnerHTML={{ __html: formatText(results.recommendations) }}></div>
                        </div>

                        <div className="analysis-section">
                            <h4>üè• –ö –∫–∞–∫–æ–º—É –≤—Ä–∞—á—É –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è</h4>
                            <div dangerouslySetInnerHTML={{ __html: formatText(results.doctorRecommendation) }}></div>
                        </div>
                    </div>
                )}

                <div className="disclaimer">
                    <strong>‚ö†Ô∏è –í–∞–∂–Ω–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ:</strong> –î–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ü–µ–ª–µ–π –∏ –Ω–µ –∑–∞–º–µ–Ω—è–µ—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é –º–µ–¥–∏—Ü–∏–Ω—Å–∫—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é, –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –∏–ª–∏ –ª–µ—á–µ–Ω–∏–µ. –ü—Ä–∏ —Å–µ—Ä—å–µ–∑–Ω—ã—Ö —Å–∏–º–ø—Ç–æ–º–∞—Ö –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –≤—Ä–∞—á—É –∏–ª–∏ –≤—ã–∑–æ–≤–∏—Ç–µ —Å–∫–æ—Ä—É—é –ø–æ–º–æ—â—å.
                </div>
            </div>
        </div>
    );
}
